apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 1
        versionName "${LIB_VERSION}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task copyAar(type: Copy) {
    from('build/outputs/aar/')
    into('release/')
    include(LIB_NAME + '-release.aar')
}
task unzipAar(type: Copy) {
    from zipTree('release/' + LIB_NAME + '-release.aar')
    into('release')
    rename('classes.jar', LIB_NAME + '-' + LIB_VERSION + '.jar')
}
task makeJar(type: Delete) {
    delete 'release/AndroidManifest.xml', 'release/R.txt', 'release/res', 'release/values', 'release/' + LIB_NAME + '-release.aar'
}
makeJar.dependsOn(build, copyAar, unzipAar)

// Creates Maven repository
def repo = new File(rootDir, "repo")

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${repo.absolutePath}"
            pom.version = "${LIB_VERSION}"
            pom.groupId = 'jp.hituzi'
            pom.artifactId = 'kamome'
        }
    }
}
