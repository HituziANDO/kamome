// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name kamome
import Foundation
import Swift
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import kamome
open class LocalCompletion : kamome.Completable {
  public typealias Callback = (_ result: Any?, _ errorMessage: Swift.String?) -> Swift.Void
  public init(callback: kamome.LocalCompletion.Callback? = nil)
  @objc deinit
  public var isCompleted: Swift.Bool {
    get
  }
  public func resolve()
  public func resolve(_ data: [Swift.String : Any?])
  public func resolve(_ data: [Any?])
  public func reject()
  public func reject(_ errorMessage: Swift.String?)
}
public enum KamomeError : Swift.Error {
  case invalidJSONObject
  case commandNotAdded(Swift.String)
}
public typealias TransferData = [Swift.String : Any?]
open class Command {
  public typealias Handler = (_ name: Swift.String, _ data: kamome.TransferData?, _ completion: any kamome.Completable) -> Swift.Void
  public init(_ name: Swift.String, handler: @escaping kamome.Command.Handler)
  @objc deinit
}
public enum HowToHandleNonExistentCommand {
  case resolved
  case rejected
  case exception
  public static func == (a: kamome.HowToHandleNonExistentCommand, b: kamome.HowToHandleNonExistentCommand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ConsoleLoggable {
  func consoleLog(_ logMessage: Any)
}
@_hasMissingDesignatedInitializers open class DefaultConsoleLogger : kamome.ConsoleLoggable {
  public func consoleLog(_ logMessage: Any)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ConsoleLogAdapter : ObjectiveC.NSObject {
  public var logger: any kamome.ConsoleLoggable
  public func setTo(_ webView: WebKit.WKWebView)
  @objc override dynamic public init()
  @objc deinit
}
extension kamome.ConsoleLogAdapter : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public protocol Completable {
  var isCompleted: Swift.Bool { get }
  func resolve()
  func resolve(_ data: [Swift.String : Any?])
  func resolve(_ data: [Any?])
  func reject()
  func reject(_ errorMessage: Swift.String?)
}
open class Completion : kamome.Completable {
  public init(webView: WebKit.WKWebView, requestID: Swift.String)
  public var isCompleted: Swift.Bool {
    get
  }
  public func resolve()
  public func resolve(_ data: [Swift.String : Any?])
  public func resolve(_ data: [Any?])
  public func reject()
  public func reject(_ errorMessage: Swift.String?)
  @objc deinit
}
public let kamomeVersionCode: Swift.Int
public typealias SendMessageCallback = (_ commandName: Swift.String, _ result: Any?, _ errorMessage: Swift.String?) -> Swift.Void
@objc open class Client : ObjectiveC.NSObject {
  public static let scriptMessageHandlerName: Swift.String
  public var howToHandleNonExistentCommand: kamome.HowToHandleNonExistentCommand
  public var readyEventHandler: (() -> Swift.Void)?
  public var isReady: Swift.Bool {
    get
  }
  public init(_ webView: WebKit.WKWebView)
  @discardableResult
  public func add(_ command: kamome.Command) -> kamome.Client
  public func remove(_ commandName: Swift.String)
  public func hasCommand(_ name: Swift.String) -> Swift.Bool
  public func send(_ commandName: Swift.String, callback: kamome.SendMessageCallback? = nil)
  public func send(_ data: [Swift.String : Any?], commandName: Swift.String, callback: kamome.SendMessageCallback? = nil)
  public func send(_ data: [Any?], commandName: Swift.String, callback: kamome.SendMessageCallback? = nil)
  public func execute(_ commandName: Swift.String, callback: kamome.LocalCompletion.Callback?)
  public func execute(_ commandName: Swift.String, data: kamome.TransferData?, callback: kamome.LocalCompletion.Callback?)
  @objc deinit
}
extension kamome.Client : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension kamome.HowToHandleNonExistentCommand : Swift.Equatable {}
extension kamome.HowToHandleNonExistentCommand : Swift.Hashable {}
